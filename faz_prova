# -*- coding: UTF-8 -*-

def faz_prova():

    #importing libraries
    import random
    import re
    import MySQLdb
    from time import sleep

    #Connecting to DB
    db = MySQLdb.connect(host='localhost',
		     user='root',
		     passwd='',
		     db='questoes')

    # Creating cursor
    cur = db.cursor()

    # Creating global variables
    respostas = {}
    errado = []
    lista_quest = []
    dict_materia = {}
    materia_escolhida = []
    dict_materia_qtdd = {}
    dict_materia_questoes = {}
    questao = 1
    erro = 0
   

    # Ask user for input about subject and number of questions
    ## Getting all subjects from db and placing in dictionary
    cur.execute("SELECT DISTINCT (materia) FROM perguntas")
    for each in range(cur.rowcount):
        dict_materia[each]=(str(cur.fetchone())).strip("()\\'\\',")
        
        print ("(" + str(each) + ") - " + str(dict_materia[each])) 

    ## Creating list and asking user which subjects should the test have
    loop = 0
    
    while (True):
        ## print chosen subjects thus far
        if loop == 0:
            choose_subject = raw_input("Prova de que materia? Escolha pelo numero ")
            loop += 1
        else:
            print ("Voce ja escolheu: ")
            for each in range(len(materia_escolhida)):
                print (materia_escolhida[each])
            choose_subject = raw_input("Mais alguma materia? Se estiver satisfeito aperte X. ")
        
        # terminate loop with choosen subjects
        if choose_subject == "x":
            break
        ## error control - uncooperative user
        elif erro > 5:
            print ("Nao cooperou. Hora de dizer tchau")
            #Closing db connection
            cur.close()
            db.close()
            return 1

        # if input within range of subjects
        elif ord(choose_subject) < cur.rowcount+48:
            # if subject has already been choosen
            if dict_materia[int(choose_subject)] in materia_escolhida:
                print ("Essa materia v. ja escolheu!")
                erro += 1
                
            # if all is good, add subject to list
            else:
                materia_escolhida.append(dict_materia[int(choose_subject)])
                
       
        # invalid input by user
        else:
            print ("Essa escolha é inválida! Digite somente o numero referente a materia")
            erro += 1
            continue
        
    ## How many questions from each subject chosen 

    for each_subj in materia_escolhida:
        qtdd_quest = raw_input("E quantas questoes de " + str(each_subj) + "? ")
        dict_materia_qtdd[each_subj] = qtdd_quest
        
        
    # creating random list of numbers in the quantity of questions desired for each subject
    
    for each_subj in materia_escolhida:
        temp_lista = []
        for each_qtdd in range(int(dict_materia_qtdd[each_subj])):
            num = random.randrange(1,1001)
            if num in temp_lista:
                temp_lista.append(num+1%1001)
            else:
                temp_lista.append(num)
        temp_lista = sorted(temp_lista)
        dict_materia_questoes[each_subj] = temp_lista
        
    
        
    ## Starting the test
    print "Vai comecar!"
    print "Imprimindo as questoes"
    sleep(2)
    print "Conferindo os gabaritos"
    sleep(2)
    print "Tudo pronto"
    sleep(1)
    print "\n" * 20
    

    
    # Printing the question accordindly with the random list generated
    for each_subj in materia_escolhida:
        print "\n"
        print ("Direito " + each_subj)
        print "----------------------------------------------------------------------------------"
        print "\n"
        for each_quest in range(int(dict_materia_qtdd[each_subj])):
            print ("Questao" + str(questao) + " - ")
            temp_1 = str(dict_materia_questoes[each_subj][each_quest])
            cur.execute("SELECT `pergunta`, `index` FROM perguntas WHERE num_quest = " \
                               + temp_1 + " AND materia = \""+ each_subj +"\"")
            temp = cur.fetchone()
            ask = str(temp[0])
            print ask
            questao += 1
            resp = raw_input("Certo - C ou Errado E: ")
            if (resp == "c") or (resp =="C"):
                resp = "Certo\n"
            elif (resp == "e") or (resp == "E"):
                resp = "Errado\n"
            respostas[temp[1]] = resp
            lista_quest.append(int((str(temp[1])).strip("()\\'\\',")))
            print "\n"

    # Fetching the correct the answers
    # Creating dictionary to store answers
    gabarito = {}

    # Fetching answers from db
    for each_line in lista_quest:
        cur.execute("SELECT resposta FROM perguntas WHERE `index` =" + str(each_line))
        temp_resp = cur.fetchone()
        gabarito[each_line] = (str(temp_resp)).strip("()\\'\\',")
        
    
    #Comparing answers
    for each in lista_quest:
       if respostas[each].strip("\n") != gabarito[each]:
            errado.append(each)
    
    
    # Final grade and checking wrong answers
    #Little monkey business before showing answer
    print "\n" * 20
    print "Verificando respostas"
    sleep(2)
    print "Reconferindo"
    sleep(1)
    print "Pronto"
    sleep(1)

    nota = "Sua nota final e " + str(100-(len(errado)* 100) // len(lista_quest))
    
    if len(errado) == 0:
        print ("Deixa eu olhar isso direito")
        sleep(2)
        print ("PARABENS!! Acertou tudo!")
        print nota
        print ("Good Job!")
    else:
        print ("Voce errou " + str(len(errado)))
        print nota
        correcao = raw_input("Voce quer ver as respostas erradas? sim ou nao? ")

        # Showing the correct answers
        if (correcao == "sim"):
            #Little monkey business to show answer
            print "Procurando as correcoes"
            sleep(1)
            print "Perai"
            sleep(1)
            print "La vai"
            sleep(1)
            # Of the wrong answer getting the comments
            print ("Voce errou as questoes:")
            print errado
            # With the list of wrong answers (errado)
            # printing the explanation for each wrong question
            for each_line in range(len(errado)):
                print ("\n")
                print ("-----------------------------------------------------------------------------")
                print ("\n")
                print ("Questao " + str(errado[each_line]))
                cur.execute("SELECT pergunta FROM perguntas WHERE `index` = " + str(errado[each_line]))
                print (str(cur.fetchone()[0])).strip("()\\'\\',")
                print ("Resposta: ")
                cur.execute("SELECT explicacao FROM perguntas WHERE `index` =" + str(errado[each_line]))
                print (str(cur.fetchone()[0])).strip("()\\'\\',")
            print ("-----------------------------------------------------------------------------")    
            
        # Checking out
        else:
            print ("Keep up")
    
    
    #Closing db connection
    cur.close()
    db.close()

    return "Good bye"
